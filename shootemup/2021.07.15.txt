Trail Rendererについて

Trail:軌跡・足跡・地面に残った跡
イメージとしては飛行機雲

Trail Rendererというのは軌跡を描画する
Trail Rendererで検索すると99％Unityが出てくる
正直、自前実装とかは見つからないかと…

トレイルはオブジェクトが移動した後に沿って描画される
つまりこれは、場所の履歴を結んだものが
トレイル（軌跡）といえる。
場所（座標）を１フレームごとにとってお起きて、
それを線としてつなげる

履歴をとるために、動的を増えたり減ったりする
配列的なものが欲しい。

×vector
〇list

vectorだのlistだのarrayだのはコンテナと
いうが、それぞれのコンテナにはメリット
デメリットがある。

今回は弱点に注目してどれを選ぶかに決める

弱点
vector:頻繁な要素の追加、削除に弱い
	特に先頭に要素を入れられるのが弱い
list:ランダムアクセスに弱い
	（順番通りのアクセスが―番早い）
	メモリが連続していない

メリット
vector:メモリが連続している。
	ランダムアクセスが強い。
list:追加、削除のコストが小さい



でも、迷ったら
vectorを使う
動歴配列なので柔軟には使えるので、
迷ったらvector。コンテナのインターフェース
似た構造になってるので、途中でvectorをlistに
変えたいと思ったら、変更のコストは比較的軽い。

// 一番最初に習うfor文
for(int=0;;i<10;++i){
// 繰り返し処理
}

範囲for文とは：配列やコンテナみたいに
複数の要素を格納しているコンテナ内の
要素をすべて参照、処理するfor文

範囲for文の文法
for(要素の型名　変数名：コンテナオブジェクト）｛
｝
型名は小手名の要素であることがわかり切っているのっで
たいていはautoを使用する
for(auto 変数名：コンテナオブジェクト）｛
｝

ただし、注意点…この書き方の場合、それぞれの
要素を一時変数にコピーして使ってるにすぎないので
中の値を変更したい場合は参照記号＆などを用いる

// 範囲for文


三項演算子

式？値①：値②

式がtrueなら値①を採用
そうじゃないなら値②を採用